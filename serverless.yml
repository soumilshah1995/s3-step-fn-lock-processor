service: s3-locked-processor

frameworkVersion: '4.7.0'

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  memorySize: 256
  timeout: 200
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:DeleteObject"
            - "s3:ListBucket"
          Resource:
            - "arn:aws:s3:::${self:custom.bucketName}/*"
            - "arn:aws:s3:::${self:custom.bucketName}"
        - Effect: "Allow"
          Action:
            - "elasticmapreduce:AddJobFlowSteps"
            - "elasticmapreduce:DescribeStep"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "states:StartExecution"
          Resource: "*"

custom:
  bucketName: soumil-dev-bucket-1995

plugins:
  - serverless-step-functions

functions:
  checkIfLockExists:
    handler: handlers/check_lock.handler
    description: Checks if a lock can be acquired for the processing job

  acquireLock:
    handler: handlers/acquire_lock.handler
    description: Acquires the lock and increments the lock counter

  releaseLock:
    handler: handlers/release_lock.handler
    description: Releases the lock and decrements the lock counter and delete lock file

stepFunctions:
  stateMachines:
    s3LockedProcessorWorkflow:
      name: s3-locked-processor-workflow
      definition:
        Comment: "S3 Locked Processor Workflow"
        StartAt: CheckIfLockExists
        States:
          CheckIfLockExists:
            Type: Task
            Resource:
              Fn::GetAtt: [checkIfLockExists, Arn]
            Next: CanAcquireLock
            ResultPath: "$.lockStatus"

          CanAcquireLock:
            Type: Choice
            Choices:
              - Variable: "$.lockStatus.canAcquireLock"
                BooleanEquals: true
                Next: AcquireLock
              - Variable: "$.lockStatus.canAcquireLock"
                BooleanEquals: false
                Next: LockFailed

          AcquireLock:
            Type: Task
            Resource:
              Fn::GetAtt: [acquireLock, Arn]
            Next: SubmitEMRStep
            ResultPath: "$.lockAcquisition"

          SubmitEMRStep:
            Type: Pass
            ResultPath: "$.submitEMRResult"
            Next: SimulateWorker

          SimulateWorker:
                Type: Wait
                Seconds: 60
                Next: ReleaseLock

          ReleaseLock:
                Type: Task
                Resource:
                  Fn::GetAtt: [releaseLock, Arn]
                End: true

          LockFailed:
            Type: Fail
            Error: "LockAcquisitionFailed"
            Cause: "Could not acquire lock for processing"

